{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["module","exports","ContactForm","handleSubmit","useState","name","setName","console","log","number","setNumber","handleChange","event","currentTarget","value","className","styles","form","onSubmit","evt","preventDefault","title","onChange","inputContact","type","pattern","required","placeholder","btn","Filter","handleFilter","filter","block","htmlFor","id","input","ContactsListItem","item","handleDelete","textContent","onClick","ContactsList","items","ul","map","Contacts","contacts","setContacts","setFilter","formattedFilter","toLowerCase","trim","filteredItems","includes","useEffect","parsedContacts","JSON","parse","localStorage","getItem","setItem","stringify","term","some","contact","alert","newTodo","uuid","prevContacts","target","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.9d6a0a78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1568K\",\"title\":\"ContactForm_title__1_hwX\",\"inputContact\":\"ContactForm_inputContact__3A_3Y\",\"btn\":\"ContactForm_btn__YLS5q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Filter_block__2Uh_K\",\"title\":\"Filter_title__PN2d8\",\"input\":\"Filter_input__Q3ROo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactListItem_btn__Xnb5h\",\"textContent\":\"ContactListItem_textContent__32GVT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"ContactList_ul__7PC9k\"};","import { useState } from \"react\";\r\n// import { v4 as uuid } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\n// ===============================================================\r\nconst ContactForm = ({ handleSubmit }) => {\r\n  const [name, setName] = useState(\"\");\r\n  console.log(handleSubmit);\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const onSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    handleSubmit({ name, number });\r\n\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={styles.form} onSubmit={onSubmit}>\r\n        <span className={styles.title}>Name</span>\r\n        <input\r\n          onChange={handleChange}\r\n          className={styles.inputContact}\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          placeholder=\"имя:\"\r\n        />\r\n        <span className={styles.title}>Number</span>\r\n        <input\r\n          className={styles.inputContact}\r\n          name=\"number\"\r\n          type=\"tel\"\r\n          onChange={handleChange}\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          placeholder=\"тел:\"\r\n        />\r\n        <button className={styles.btn} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n// ===============================================================\r\n\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     id: uuid(),\r\n//     name: \"\",\r\n//     number: \"\",\r\n//   };\r\n\r\n//   handleChange = (evt) => {\r\n//     this.setState({ [evt.target.name]: evt.target.value });\r\n//   };\r\n\r\n//   onSubmit = (evt) => {\r\n//     evt.preventDefault();\r\n\r\n//     this.props.handleSubmit(this.state);\r\n\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <form className={styles.form} onSubmit={this.onSubmit}>\r\n//           <span className={styles.title}>Name</span>\r\n//           <input\r\n//             onChange={this.handleChange}\r\n//             className={styles.inputContact}\r\n//             value={this.state.name}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//             placeholder=\"имя:\"\r\n//           />\r\n//           <span className={styles.title}>Number</span>\r\n//           <input\r\n//             className={styles.inputContact}\r\n//             name=\"number\"\r\n//             type=\"tel\"\r\n//             onChange={this.handleChange}\r\n//             value={this.state.number}\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             required\r\n//             placeholder=\"тел:\"\r\n//           />\r\n//           <button className={styles.btn} type=\"submit\">\r\n//             Add contact\r\n//           </button>\r\n//         </form>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n// ContactForm.propTypes = {\r\n//   handleSubmit: PropTypes.func.isRequired,\r\n// };\r\n\r\n// export default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ handleFilter, filter }) => {\r\n  return (\r\n    <div className={styles.block}>\r\n      <label className={styles.title} htmlFor=\"filter\">\r\n        Find contacts by name:\r\n      </label>\r\n      <input\r\n        id=\"filter\"\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        className={styles.input}\r\n        onChange={handleFilter}\r\n        value={filter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  handleFilter: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from \"prop-types\";\r\nimport styles from \"./ContactListItem.module.css\";\r\nconst ContactsListItem = ({ item, handleDelete}) => {\r\n  const { name, number } = item;\r\n\r\n  return (\r\n    <li>\r\n      <div className={styles.textContent}>\r\n        <span>\r\n          {name}: {number}\r\n        </span>\r\n        <button className={styles.btn} onClick={handleDelete}>X</button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactsListItem.propTypes = {\r\n  item: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsListItem;\r\n","import PropTypes from \"prop-types\";\r\nimport ContactsListItem from \"../ContactListItem/ContactListItem\";\r\nimport styles from \"./ContactList.module.css\";\r\n\r\nconst ContactsList = ({ items, handleDelete }) => {\r\n  return (\r\n    <>\r\n      <ul className={styles.ul}>\r\n        {items.map((item) => (\r\n          <ContactsListItem\r\n            key={item.id}\r\n            item={item}\r\n            handleDelete={() => handleDelete(item.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.string.isRequired }))\r\n    .isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","// import { Component } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport ContactForm from \"./components/ContactForm//ContactForm\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport ContactsList from \"./components/ContactList/ContactList\";\r\n\r\nconst Contacts = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  const handleDelete = (id) => {\r\n    setContacts((prevContacts) => {\r\n      return prevContacts.filter((contact) => contact.id !== id);\r\n    });\r\n  };\r\n\r\n  const handleFilter = (evt) => {\r\n    const { value } = evt.target;\r\n    setFilter(value);\r\n  };\r\n\r\n  const handleSubmit = (term) => {\r\n    if (!term) {\r\n      alert(\"Поле не может быть пустым!\");\r\n      return;\r\n    }\r\n\r\n    const isDuplicate = contacts.some(\r\n      (contact) => contact.name.toLowerCase() === term.name.toLowerCase()\r\n    );\r\n    if (isDuplicate) {\r\n      alert(\"Контакт: \" + term.name + \" уже существует \");\r\n      return;\r\n    }\r\n\r\n    const newTodo = {\r\n      id: uuid(),\r\n      name: term.name,\r\n      number: term.number,\r\n    };\r\n\r\n    setContacts((prevContacts) => [newTodo, ...prevContacts]);\r\n  };\r\n\r\n  const formattedFilter = filter.toLowerCase().trim();\r\n\r\n  const filteredItems = contacts.filter((item) =>\r\n    item.name.toLowerCase().includes(formattedFilter)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\r\n    console.log(parsedContacts);\r\n    if (parsedContacts) {\r\n      setContacts(parsedContacts);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm handleSubmit={handleSubmit} />\r\n      <h2>Contacts</h2>\r\n      <div>\r\n        <Filter filter={filter} handleFilter={handleFilter} />\r\n        <ContactsList items={filteredItems} handleDelete={handleDelete} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}